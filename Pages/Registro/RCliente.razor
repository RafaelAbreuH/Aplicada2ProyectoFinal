@page "/Registro/Cliente"
@page "/Registro/Cliente/{ClienteId:int}"
@inject IToastService toastService



    <style>
        .demo-mat-card {
            max-width: 900px;
            margin-top: 2rem;
            margin-left: auto;
            margin-right: auto
        }
    </style>

    <MatCard Class="demo-mat-card">
        <MatHeadline6 Class="demo-mat-card-clean-margin">
            Clientes
        </MatHeadline6>
        <div class="form-register">


            <EditForm Model="@Cliente" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                <label class="text-muted form-text">@Mensaje</label>


                <div class="form-row">
                    <div class="input-group-append">
                        <MatTextField Label="ClienteId" @bind-Value="Cliente.ClienteId" Style="height: 37px;"></MatTextField>
                        <ValidationMessage For="(() => Cliente.ClienteId)" />
                        <MatThemeProvider Theme="buscar">  <MatButton Raised="true" Icon="search" @onclick="Buscar" Style=" width: 7rem;"> Buscar</MatButton> </MatThemeProvider>
                    </div>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <MatDatePicker @bind-Value="Cliente.Fecha" Label="Fecha" Style="height:37px; width: 10rem; "></MatDatePicker>
                    <ValidationMessage For="(() => Cliente.Fecha)" />
                </div>
                <br />

                <div class="form-group">
                    <label for="TipoCliente">TipoCliente</label>
                    <InputSelect @bind-Value="@TipoClienteSeleccionado" class="form-control " @onchange="SeleccionarTipoCliente" @onclick="SeleccionarTipoCliente">
                        <option value="0" disabled selected>Seleccione un Tipo de Cliente</option>
                        @if (ListadoTipoClientes.Count <= 0)
                        {
                            <option value="" disabled>No Hay TipoCliente Registrado</option>
                        }
                        else
                            @foreach (var item in ListadoTipoClientes)
                            {
                                <option value="@item.TipoClienteId">@item.Descripcion</option>
                            }

                    </InputSelect>
                    <ValidationMessage For="@(()=>Cliente.TipoClienteId)" />
                </div>
               

                <div class="form-group">
                    <MatTextField Label="Nombre" @bind-Value="Cliente.Nombre" Style="height:37px; width: 30rem;"></MatTextField>
                    <ValidationMessage For="(() => Cliente.Nombre)" />
                </div>
        

                <div class="form-group">

                    <MatTextField Label="Cedula" @bind-Value="Cliente.Cedula" Style="height:37px; width: 30rem;"></MatTextField>
                    <ValidationMessage For="(() => Cliente.Cedula)" />
                </div>
            

                <div class="form-group">

                    <MatTextField Label="Telefono" @bind-Value="Cliente.Telefono" Style="height:37px; width: 30rem;"></MatTextField>
                    <ValidationMessage For="(() => Cliente.Telefono)" />
                </div>
                <div class="form-group">
                    <MatTextField Label="Direccion" @bind-Value="Cliente.Direccion" Style="height:37px; width: 30rem;"></MatTextField>
                    <ValidationMessage For="(() => Cliente.Direccion)" />
                </div>


                <div>
                    <MatButton Raised="true" Icon="insert_drive_file" @onclick="Limpiar">Nuevo</MatButton>
                    <MatThemeProvider Theme="guarda">  <MatButton Raised="true" Type="submit" Icon="save">Guardar</MatButton>   </MatThemeProvider>
                    <MatThemeProvider Theme="eliminar"> <MatButton Raised="true" Icon="delete" @onclick="Eliminar">Eliminar</MatButton> </MatThemeProvider>

                </div>
                <h5 class="text-success">@Mensaje</h5>
            </EditForm>
        </div>
    </MatCard>

        @code {
            [Parameter]
            public int ClienteId { get; set; }
            string Mensaje = string.Empty;
            string TipoClienteSeleccionado = "0";
            Clientes Cliente = new Clientes();
            ClientesController controller = new ClientesController();
            TipoClientesController tipoClientesController = new TipoClientesController();
            private List<TiposClientes> ListadoTipoClientes { get; set; }

            protected override void OnInitialized()
            {

                ListadoTipoClientes = tipoClientesController.GetList(e => true);
                Limpiar();
                if (ClienteId != 0)
                {
                    Cliente = controller.Buscar(ClienteId);
                }
            }
            private void Limpiar()
            {
                Cliente = new Clientes();
            }

            public void Guardar()
            {
                if (controller.Guardar(Cliente))
                {
                    Limpiar();
                    toastService.ShowSuccess("Cliente guardado correctamente", "Exito");
                }
                else
                {
                    Limpiar();
                    toastService.ShowError("Error al guardar el cliente", "Fallo");
                }
            }

            public void Buscar()
            {
                var cliente = controller.Buscar(Cliente.ClienteId);

                if (cliente != null)
                {
                    Cliente = cliente;
                    toastService.ShowSuccess("Cliente encontrado.", "Exito");
                }
                else
                {
                    Limpiar();
                    toastService.ShowError("El cliente no fue encontrado.", "Fallo");
                }
            }

            public void Eliminar()
            {
                var cliente = controller.Buscar(Cliente.ClienteId);

                if (cliente != null)
                {
                    controller.Eliminar(Cliente.ClienteId);
                    Limpiar();
                    toastService.ShowSuccess("Cliente eliminado correctamente.", "Exito");
                }
                else
                {
                    Limpiar();
                    toastService.ShowError("Error al eliminar el cliente.", "Fallo");
                }
            }
            private void SeleccionarTipoCliente()
            {
                Cliente.TipoClienteId = Convert.ToInt32(TipoClienteSeleccionado);
            }

            
                MatTheme guarda = new MatTheme()
            {
                Primary = "green",
            };
 
                MatTheme eliminar = new MatTheme()
            {
                Primary = "red",
            };
 
                MatTheme buscar = new MatTheme()
            {
                Primary = "grey",
            };
 
        }

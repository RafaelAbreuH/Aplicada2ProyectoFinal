@page "/Registro/Usuario"
@page "/Registro/Usuario/{UsuarioId:int}"
@inject IToastService toastService


<style>
    .demo-mat-card {
        max-width: 900px;
        margin-top: 2rem;
        margin-left: auto;
        margin-right: auto
    }
</style>

<MatCard Class="mat-elevation-z8 demo-mat-card">
    <MatHeadline6 Class="demo-mat-card-clean-margin">
        TipoClientes
    </MatHeadline6>
    <MatDivider Padded="true"></MatDivider>

    <div class="form-register">
        <h3>Usuarios</h3>
        <EditForm Model="@Usuario" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <label class="text-muted form-text">@Mensaje</label>
            <fieldset>
                <div class="form-row">
                    <div class="input-group-append">
                        <MatTextField Label="UsuarioId" Required="true" @bind-Value="Usuario.UsuarioId" InputStyle="number" Style="height: 37px;"></MatTextField>
                        <ValidationMessage For="(() => Usuario.UsuarioId)" />
                        <MatThemeProvider Theme="buscar">  <MatButton Raised="true" Icon="search" @onclick="Buscar" Style=" width: 7rem;"> Buscar</MatButton> </MatThemeProvider>
                    </div>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <MatDatePicker Required="true" @bind-Value="Usuario.Fecha" Label="Fecha" Style="height:37px; width: 10rem; "></MatDatePicker>
                    <ValidationMessage For="(() => Usuario.Fecha)" />
                </div>
                <div class="form-group">
                    <MatTextField Label="Nombre" Required="true" @bind-Value="Usuario.Nombre" Style="height: 37px;"></MatTextField>
                    <ValidationMessage For="(() => Usuario.Nombre)" />
                </div>
                <div class="form-group">
                    <MatTextField Label="Email" Required="true" @bind-Value="Usuario.Usuario" Icon="mail_outline" Style="height: 37px;"></MatTextField>
                    <ValidationMessage For="(() => Usuario.Usuario)" />
                </div>
                <div class="form-group">
                    <MatTextField Label="Contraseña" Required="true" @bind-Value="Usuario.Contraseña" Style="height: 37px;" Type="password" Icon="lock_outline" IconTrailing="true"></MatTextField>
                    <ValidationMessage For="(() => Usuario.Contraseña)" />
                </div>
                <div class="form-group">
                    <MatTextField Label="Confirmar Contraseña" Required="true" @bind-Value="Usuario.RepeatContraseña" Style="height: 37px;" Type="password" Icon="lock_outline" IconTrailing="true"></MatTextField>
                    <ValidationMessage For="(() => Usuario.RepeatContraseña)" />
                </div>
                <div class="form-group">
                    <label>Tipo de Usuario</label>
                    <InputSelect class="form-control" @bind-Value="Usuario.TipoUsuarioId">
                        <option value="0" disabled selected>Seleccione un Tipo de Usuario</option>
                        @if (ListadoTipos.Count == 0)
                        {
                            <option value="" disabled>No hay Tipo de usuario Registrado</option>
                        }
                        else
                        {
                            @foreach (var item in ListadoTipos)
                            {
                                <option value="@item.TipoUsuarioId">@item.Descripcion</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => Usuario.TipoUsuarioId)" />
                </div>

                <div>
                    <MatButton Raised="true" Icon="insert_drive_file" @onclick="Limpiar">Nuevo</MatButton>
                    <MatThemeProvider Theme="guarda">  <MatButton Raised="true" Type="submit" Icon="save">Guardar</MatButton>   </MatThemeProvider>
                    <MatThemeProvider Theme="eliminar"> <MatButton Raised="true" Icon="delete" @onclick="Eliminar">Eliminar</MatButton> </MatThemeProvider>
                </div>
                <h5 class="text-success">@Mensaje</h5>
             </fieldset>>
</EditForm>
    </div>
</MatCard>

    @code {
        [Parameter]
        public int UsuarioId { get; set; }
        string Mensaje = string.Empty;
        private int TipoSeleccionado = 0;
        Usuarios Usuario { get; set; }
        UsuariosController controller = new UsuariosController();
        TiposUsuarios Tipos { get; set; }
        List<TiposUsuarios> ListadoTipos = new List<TiposUsuarios>();
        TipoUsuariosController tipousuariosController = new TipoUsuariosController();

        protected override void OnInitialized()
        {
            Usuario = new Usuarios();
            Tipos = new TiposUsuarios();
            ListadoTipos = tipousuariosController.GetList(e => true);
            if (UsuarioId != 0)
            {
                Usuario = controller.Buscar(UsuarioId);
            }
        }
        private void Limpiar()
        {
            Usuario = new Usuarios();
        }

        public void Guardar()
        {
            if (controller.Guardar(Usuario))
            {
                Limpiar();
                toastService.ShowSuccess("Usuario guardado correctamente", "Exito");
            }
            else
            {
                Limpiar();
                toastService.ShowError("Error al guardar el usuario", "Fallo");
            }
        }

        public void Buscar()
        {
            var usuario = controller.Buscar(Usuario.UsuarioId);

            if (usuario != null)
            {
                Usuario = usuario;
                TipoSeleccionado = Usuario.TipoUsuarioId;
                toastService.ShowSuccess("Usuario encontrado.", "Exito");
            }
            else
            {
                Limpiar();
                toastService.ShowError("El usuario no fue encontrado.", "Fallo");
            }
        }

        public void Eliminar()
        {
            var usuario = controller.Buscar(Usuario.UsuarioId);

            if (usuario != null)
            {
                controller.Eliminar(Usuario.UsuarioId);
                Limpiar();
                toastService.ShowSuccess("Usuario eliminado correctamente.", "Exito");
            }
            else
            {
                Limpiar();
                toastService.ShowError("Error al eliminar el usuario.", "Fallo");
            }
        }
        private void SeleccionarTipo()
        {
            Usuario.TipoUsuarioId = TipoSeleccionado;
        }

                     MatTheme guarda = new MatTheme()
            {
                Primary = "green",
            };
 
                MatTheme eliminar = new MatTheme()
            {
                Primary = "red",
            };
 
                MatTheme buscar = new MatTheme()
            {
                Primary = "grey",
            };
 
    }

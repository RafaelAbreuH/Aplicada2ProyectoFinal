@page "/Registro/TipoUsuario"
@page "/Registro/TipoUsuario/{TipoUsuarioId:int}"
@inject IMatToaster  Toaster
<style>
    .demo-mat-card {
        max-width: 500px;
        margin-top: 2rem;
        margin-left: auto;
        margin-right: auto
    }
</style>

<MatCard Class="mat-elevation-z8 demo-mat-card mat-layout-grid">
    <MatHeadline6 Class="demo-mat-card-clean-margin mat-layout-grid-cell mat-layout-grid-cell-align-middle">
        TipoUsuarios
    </MatHeadline6>
    <MatDivider Padded="true"></MatDivider>

    <div class="form-register">
        <EditForm Model="@TipoUsuario" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <label class="text-muted form-text">@Mensaje</label>


            <div class="input-group-append">
                <MatTextField Label="TipoUsuarioId" Required="true" @bind-Value="TipoUsuario.TipoUsuarioId" InputStyle="number" Style="height: 37px; margin-left:5px"></MatTextField>
                <ValidationMessage For="(() => TipoUsuario.TipoUsuarioId)" />
                <MatThemeProvider Theme="buscar">  <MatButton Raised="true" Icon="search" @onclick="Buscar" Style=" max-width: 7rem;"> Buscar</MatButton> </MatThemeProvider>
            </div>
            <br />
            <div class="form-group">
                <MatTextField Label="Descripcion" Required="true" @bind-Value="TipoUsuario.Descripcion" Style="height: 37px;  width:100%  !important;"  ></MatTextField>
                <ValidationMessage For="(() => TipoUsuario.Descripcion)" />
            </div>

            <div>
                <MatButton Raised="true" Icon="insert_drive_file" @onclick="Limpiar">Nuevo</MatButton>
                <MatThemeProvider Theme="guarda">  <MatButton Raised="true" Type="submit" Icon="save">Guardar</MatButton>   </MatThemeProvider>
                <MatThemeProvider Theme="eliminar"> <MatButton Raised="true" Icon="delete" @onclick="Eliminar">Eliminar</MatButton> </MatThemeProvider>

            </div>
        </EditForm>
    </div>
</MatCard>
@code {
    [Parameter]
    public int TipoUsuarioId { get; set; }
    public TiposUsuarios TipoUsuario { get; set; }
    string Mensaje = string.Empty;
    string Titulo = string.Empty;
    TipoUsuariosController controller = new TipoUsuariosController();

    protected override void OnInitialized()
    {
        TipoUsuario = new TiposUsuarios();
        Limpiar();
        if (TipoUsuarioId != 0)
        {
            TipoUsuario.TipoUsuarioId = TipoUsuarioId;
            Buscar();
        }
    }

    private void Limpiar()
    {
        TipoUsuario = new TiposUsuarios();
        LimpiarMensajes();
    }

    public void LimpiarMensajes()
    {
        Mensaje = string.Empty;
        Titulo = string.Empty;
    }

    public void Guardar()
    {
        if (controller.Guardar(TipoUsuario))
        {
            Limpiar();
            Mensaje = "Se guardo el tipo de usuario correctamente";
            Titulo = "Exito";
            Show(MatToastType.Success);
            LimpiarMensajes();
        }
        else
        {
            Limpiar();
            Mensaje = "Ha ocurrido un error al guardar el tipo de usuario";
            Titulo = "Fallo";
            Show(MatToastType.Danger);
            LimpiarMensajes();
        }
    }

    public void Buscar()
    {
        TiposUsuarios tipousuario = controller.Buscar(TipoUsuario.TipoUsuarioId);

        if (tipousuario != null)
        {
            Limpiar();
            TipoUsuario = tipousuario;
            Mensaje = "Se ha encontrado el tipo de usuario correctamente";
            Titulo = "Exito";
            Show(MatToastType.Success);
            LimpiarMensajes();
        }
        else
        {
            Limpiar();
            Mensaje = "No se ha encontrado el tipo de usuario";
            Titulo = "Fallo";
            Show(MatToastType.Danger);
            LimpiarMensajes();
        }
    }

    public void Eliminar()
    {
        TiposUsuarios tipousuario = controller.Buscar(TipoUsuario.TipoUsuarioId);

        if (tipousuario != null)
        {
            controller.Eliminar(TipoUsuario.TipoUsuarioId);
            Limpiar();
            Mensaje = "Se Elimino el tipo de cliente correctamente";
            Titulo = "Exito";
            Show(MatToastType.Success);
            LimpiarMensajes();
        }
        else
        {
             Limpiar();
             Mensaje = "Ha ocurrido un error al eliminar el tipo de cliente";
             Titulo = "Fallo";
             Show(MatToastType.Danger);
             LimpiarMensajes();
        }
    }

    public void Show(MatToastType type, string icon = "")
    {
        Toaster.Add(Mensaje, type, Titulo, icon, config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = Convert.ToInt32("100");
            config.ShowTransitionDuration = Convert.ToInt32("500");
            config.VisibleStateDuration = Convert.ToInt32("5000");
            config.HideTransitionDuration = Convert.ToInt32("500");
        });
    }

        MatTheme guarda = new MatTheme() { Primary = "green" };
        MatTheme eliminar = new MatTheme(){ Primary = "red" };
        MatTheme buscar = new MatTheme() { Primary = "grey" };
}
